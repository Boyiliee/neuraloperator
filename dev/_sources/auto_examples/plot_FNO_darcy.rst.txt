
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_FNO_darcy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_FNO_darcy.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_FNO_darcy.py:


Training a neural operator on Darcy-Flow
========================================
In this example, we demonstrate how to use the small Darcy-Flow example we ship with the package

.. GENERATED FROM PYTHON SOURCE LINES 9-23

.. code-block:: default



    import torch
    import matplotlib.pyplot as plt
    import sys
    from neuralop.models import TFNO
    from neuralop import Trainer
    from neuralop.datasets import load_darcy_flow_small
    from neuralop.utils import count_params
    from neuralop import LpLoss, H1Loss

    device = 'cpu'









.. GENERATED FROM PYTHON SOURCE LINES 24-25

Loading the Navier-Stokes dataset in 128x128 resolution

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: default

    train_loader, test_loaders, output_encoder = load_darcy_flow_small(
            n_train=1000, batch_size=32, 
            test_resolutions=[16, 32], n_tests=[100, 50],
            test_batch_sizes=[32, 32],
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    UnitGaussianNormalizer init on 1000, reducing over [0, 1, 2, 3], samples of shape [1, 16, 16].
       Mean and std of shape torch.Size([1, 1, 1]), eps=1e-05
    Loading test db at resolution 32 with 50 samples and batch-size=32




.. GENERATED FROM PYTHON SOURCE LINES 33-34

We create a tensorized FNO model

.. GENERATED FROM PYTHON SOURCE LINES 34-43

.. code-block:: default


    model = TFNO(n_modes=(16, 16), hidden_channels=32, projection_channels=64, factorization='tucker', rank=0.42)
    model = model.to(device)

    n_params = count_params(model)
    print(f'\nOur model has {n_params} parameters.')
    sys.stdout.flush()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Our model has 389697 parameters.




.. GENERATED FROM PYTHON SOURCE LINES 44-45

Create the optimizer

.. GENERATED FROM PYTHON SOURCE LINES 45-51

.. code-block:: default

    optimizer = torch.optim.Adam(model.parameters(), 
                                    lr=8e-3, 
                                    weight_decay=1e-4)
    scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=30)









.. GENERATED FROM PYTHON SOURCE LINES 52-53

Creating the losses

.. GENERATED FROM PYTHON SOURCE LINES 53-60

.. code-block:: default

    l2loss = LpLoss(d=2, p=2)
    h1loss = H1Loss(d=2)

    train_loss = h1loss
    eval_losses={'h1': h1loss, 'l2': l2loss}









.. GENERATED FROM PYTHON SOURCE LINES 61-72

.. code-block:: default



    print('\n### MODEL ###\n', model)
    print('\n### OPTIMIZER ###\n', optimizer)
    print('\n### SCHEDULER ###\n', scheduler)
    print('\n### LOSSES ###')
    print(f'\n * Train: {train_loss}')
    print(f'\n * Test: {eval_losses}')
    sys.stdout.flush()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ### MODEL ###
     TFNO(
      (convs): FactorizedSpectralConv(
        (weight): ModuleList(
          (0): ComplexTuckerTensor(shape=(32, 32, 8, 8), rank=(25, 25, 6, 6))
          (1): ComplexTuckerTensor(shape=(32, 32, 8, 8), rank=(25, 25, 6, 6))
          (2): ComplexTuckerTensor(shape=(32, 32, 8, 8), rank=(25, 25, 6, 6))
          (3): ComplexTuckerTensor(shape=(32, 32, 8, 8), rank=(25, 25, 6, 6))
          (4): ComplexTuckerTensor(shape=(32, 32, 8, 8), rank=(25, 25, 6, 6))
          (5): ComplexTuckerTensor(shape=(32, 32, 8, 8), rank=(25, 25, 6, 6))
          (6): ComplexTuckerTensor(shape=(32, 32, 8, 8), rank=(25, 25, 6, 6))
          (7): ComplexTuckerTensor(shape=(32, 32, 8, 8), rank=(25, 25, 6, 6))
        )
      )
      (fno_skips): ModuleList(
        (0): SoftGating()
        (1): SoftGating()
        (2): SoftGating()
        (3): SoftGating()
      )
      (lifting): Lifting(
        (fc): Conv2d(3, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (projection): Projection(
        (fc1): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
        (fc2): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
      )
    )

    ### OPTIMIZER ###
     Adam (
    Parameter Group 0
        amsgrad: False
        betas: (0.9, 0.999)
        capturable: False
        differentiable: False
        eps: 1e-08
        foreach: None
        fused: False
        initial_lr: 0.008
        lr: 0.008
        maximize: False
        weight_decay: 0.0001
    )

    ### SCHEDULER ###
     <torch.optim.lr_scheduler.CosineAnnealingLR object at 0x7f601a0ae2b0>

    ### LOSSES ###

     * Train: <neuralop.training.losses.H1Loss object at 0x7f601a0aea90>

     * Test: {'h1': <neuralop.training.losses.H1Loss object at 0x7f601a0aea90>, 'l2': <neuralop.training.losses.LpLoss object at 0x7f6013f96250>}




.. GENERATED FROM PYTHON SOURCE LINES 73-74

Create the trainer

.. GENERATED FROM PYTHON SOURCE LINES 74-83

.. code-block:: default

    trainer = Trainer(model, n_epochs=20,
                      device=device,
                      mg_patching_levels=0,
                      wandb_log=False,
                      log_test_interval=3,
                      use_distributed=False,
                      verbose=True)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Training on regular inputs (no multi-grid patching).




.. GENERATED FROM PYTHON SOURCE LINES 84-85

Actually train the model on our small Darcy-Flow dataset

.. GENERATED FROM PYTHON SOURCE LINES 85-96

.. code-block:: default


    trainer.train(train_loader, test_loaders,
                  output_encoder,
                  model, 
                  optimizer,
                  scheduler, 
                  regularizer=False, 
                  training_loss=train_loss,
                  eval_losses=eval_losses)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Training on 1000 samples
    Testing on [50, 50] samples         on resolutions [16, 32].
    [0] time=2.26, avg_loss=26.3216, train_err=0.5264, 16_h1=0.3966, 16_l2=0.3120, 32_h1=0.4703, 32_l2=0.3183
    [3] time=1.84, avg_loss=11.2960, train_err=0.2259, 16_h1=0.2336, 16_l2=0.1823, 32_h1=0.3592, 32_l2=0.2155
    [6] time=1.98, avg_loss=9.5418, train_err=0.1908, 16_h1=0.2198, 16_l2=0.1750, 32_h1=0.3276, 32_l2=0.2021
    [9] time=1.97, avg_loss=8.7535, train_err=0.1751, 16_h1=0.1781, 16_l2=0.1312, 32_h1=0.2833, 32_l2=0.1547
    [12] time=2.01, avg_loss=7.8173, train_err=0.1563, 16_h1=0.1760, 16_l2=0.1328, 32_h1=0.2915, 32_l2=0.1654
    [15] time=2.16, avg_loss=7.3956, train_err=0.1479, 16_h1=0.1432, 16_l2=0.1007, 32_h1=0.2614, 32_l2=0.1246
    [18] time=1.94, avg_loss=6.7930, train_err=0.1359, 16_h1=0.1351, 16_l2=0.0914, 32_h1=0.2557, 32_l2=0.1220




.. GENERATED FROM PYTHON SOURCE LINES 97-107

Plot the prediction, and compare with the ground-truth 
Note that we trained on a very small resolution for
a very small number of epochs
In practice, we would train at larger resolution, on many more samples.

However, for practicity, we created a minimal example that
i) fits in just a few Mb of memory
ii) can be trained quickly on CPU

In practice we would train a Neural Operator on one or multiple GPUs

.. GENERATED FROM PYTHON SOURCE LINES 107-144

.. code-block:: default


    test_samples = test_loaders[32].dataset

    fig = plt.figure(figsize=(7, 7))
    for index in range(3):
        data = test_samples[index]
        # Input x
        x = data['x']
        # Ground-truth
        y = data['y']
        # Model prediction
        out = model(x.unsqueeze(0))

        ax = fig.add_subplot(3, 3, index*3 + 1)
        ax.imshow(x[0], cmap='gray')
        if index == 0: 
            ax.set_title('Input x')
        plt.xticks([], [])
        plt.yticks([], [])

        ax = fig.add_subplot(3, 3, index*3 + 2)
        ax.imshow(y.squeeze())
        if index == 0: 
            ax.set_title('Ground-truth y')
        plt.xticks([], [])
        plt.yticks([], [])

        ax = fig.add_subplot(3, 3, index*3 + 3)
        ax.imshow(out.squeeze().detach().numpy())
        if index == 0: 
            ax.set_title('Model prediction')
        plt.xticks([], [])
        plt.yticks([], [])

    fig.suptitle('Inputs, ground-truth output and prediction.', y=0.98)
    plt.tight_layout()
    fig.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_FNO_darcy_001.png
   :alt: Inputs, ground-truth output and prediction., Input x, Ground-truth y, Model prediction
   :srcset: /auto_examples/images/sphx_glr_plot_FNO_darcy_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  41.316 seconds)


.. _sphx_glr_download_auto_examples_plot_FNO_darcy.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_FNO_darcy.py <plot_FNO_darcy.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_FNO_darcy.ipynb <plot_FNO_darcy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
